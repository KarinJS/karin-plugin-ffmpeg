name: CI/CD

on:
  workflow_dispatch:
    inputs:
      # 手动运行模式选择
      run_mode:
        description: "运行模式"
        required: true
        default: "preview"
        type: choice
        options:
          - preview
          - production

      # 手动发布版本号（仅生产模式需要）
      manual_version:
        description: "手动指定版本号 (如: 1.2.3，仅生产模式有效)"
        required: false
        type: string

      # 发布说明
      release_notes:
        description: "发布说明 (可选)"
        required: false
        type: string

      # 是否强制发布到 NPM
      force_npm_publish:
        description: "强制发布到 NPM (仅生产模式)"
        required: false
        default: false
        type: boolean

  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]

env:
  APP_NAME: karin-plugin-kkk

permissions:
  contents: write
  id-token: write
  packages: write
  pull-requests: write

jobs:
  # 版本发布管理
  version-release:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release-please.outputs.releases_created || steps.manual-release.outputs.releases_created }}
      release_created: ${{ steps.manual-release.outputs.release_created }}
      core_tag_name: ${{ steps.manual-release.outputs.core_tag_name }}
      core_version: ${{ steps.get-version-info.outputs.core_version }}
      should_upload_release: ${{ steps.get-version-info.outputs.should_upload_release }}
      release_tag_name: ${{ steps.get-version-info.outputs.release_tag_name }}
      is_manual_production: ${{ steps.get-version-info.outputs.is_manual_production }}
      manual_release_notes: ${{ steps.get-version-info.outputs.manual_release_notes }}

    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 自动版本发布检查（非手动生产模式）
      - name: 🚀 执行版本发布检查
        if: github.event_name != 'workflow_dispatch' || inputs.run_mode != 'production'
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

      # 手动生产发布处理
      - name: 🎯 处理手动生产发布
        if: github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production'
        id: manual-release
        run: |
          if [ -z "${{ inputs.manual_version }}" ]; then
            echo "❌ 生产模式必须指定版本号" >&2
            exit 1
          fi

          # 验证版本号格式
          if ! echo "${{ inputs.manual_version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "❌ 版本号格式错误，应为 x.y.z 格式" >&2
            exit 1
          fi

          echo "releases_created=true" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT
          echo "core_tag_name=v${{ inputs.manual_version }}" >> $GITHUB_OUTPUT

          echo "✅ 手动生产发布已配置：v${{ inputs.manual_version }}"

      - name: 🏷️ 获取版本信息
        id: get-version-info
        run: |

          # 处理手动生产模式
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.run_mode }}" = "production" ]; then
            # 手动更新 package.json 版本号
            npm version ${{ inputs.manual_version }} --no-git-tag-version
            CORE_VERSION="${{ inputs.manual_version }}"
            echo "should_upload_release=true" >> $GITHUB_OUTPUT
            echo "release_tag_name=v${{ inputs.manual_version }}" >> $GITHUB_OUTPUT
            echo "is_manual_production=true" >> $GITHUB_OUTPUT
            echo "manual_release_notes=${{ inputs.release_notes }}" >> $GITHUB_OUTPUT
            echo "🎯 手动生产模式：版本 $CORE_VERSION"
          else
            # 自动模式或预览模式
            CORE_VERSION=$(node -p "require('./package.json').version")
            echo "is_manual_production=false" >> $GITHUB_OUTPUT
            echo "manual_release_notes=" >> $GITHUB_OUTPUT
            
            if [ "${{ steps.release-please.outputs.release_created }}" = "true" ] || [ "${{ inputs.force_npm_publish }}" = "true" ]; then
              echo "should_upload_release=true" >> $GITHUB_OUTPUT
              echo "release_tag_name=${{ steps.release-please.outputs.core_tag_name }}" >> $GITHUB_OUTPUT
            else
              echo "should_upload_release=false" >> $GITHUB_OUTPUT
              echo "release_tag_name=" >> $GITHUB_OUTPUT
            fi
          fi

          echo "core_version=$CORE_VERSION" >> $GITHUB_OUTPUT
          echo "📦 当前版本：$CORE_VERSION"

  # 统一构建作业（仅核心包和Web应用）
  unified-build:
    runs-on: ubuntu-latest
    needs: [version-release]
    outputs:
      build_success: ${{ steps.build-status.outputs.success }}
      package_name: ${{ steps.package-info.outputs.name }}
      package_short_name: ${{ steps.package-info.outputs.short_name }}
      commit_hash: ${{ steps.git-info.outputs.commit_hash }}
      short_commit_hash: ${{ steps.git-info.outputs.short_commit_hash }}

    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 配置 PNPM 环境
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: 🟢 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: 📦 安装依赖
        run: pnpm install

      - name: 🔨 执行完整项目构建
        run: |
          echo "开始构建所有包..."
          pnpm build
          if [ $? -ne 0 ]; then
            echo "❌ 构建失败，退出工作流"
            exit 1
          fi
          echo "✅ 构建成功"

      - name: 🏷️ 获取包信息
        id: package-info
        run: |
          PACKAGE_NAME=$(pnpm pkg get name | tr -d '"')
          PACKAGE_SHORT_NAME=$(basename "$PACKAGE_NAME")
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "short_name=$PACKAGE_SHORT_NAME" >> $GITHUB_OUTPUT

      - name: 📊 获取 Git 信息
        id: git-info
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          SHORT_COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "short_commit_hash=$SHORT_COMMIT_HASH" >> $GITHUB_OUTPUT

      # 手动生产模式：应用版本号变更
      - name: 🎯 应用手动版本号
        if: github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production'
        run: |
          npm version ${{ inputs.manual_version }} --no-git-tag-version
          echo "✅ 已应用手动版本号：${{ inputs.manual_version }}"

      - name: 📦 准备发布产物 (正式版)
        if: |
          needs.version-release.outputs.release_created == 'true' || 
          needs.version-release.outputs.releases_created == 'true' ||
          (github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production')
        run: |
          pnpm pkg delete devDependencies
          mkdir -p ${{ runner.temp }}/production/
          cp -r package.json README.md CHANGELOG.md LICENSE lib ${{ runner.temp }}/production/

      - name: 📦 准备构建分支产物
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          pnpm pkg delete devDependencies
          mkdir -p ${{ runner.temp }}/build-branch/
          cp -r package.json CHANGELOG.md README.md LICENSE lib ${{ runner.temp }}/build-branch/

      - name: 📦 准备预览包产物
        if: github.event_name != 'workflow_dispatch' || inputs.run_mode != 'production'
        run: |
          mkdir -p ${{ runner.temp }}/preview/
          cp -r package.json README.md CHANGELOG.md LICENSE lib ${{ runner.temp }}/preview/

      - name: 📤 上传正式版构建产物
        if: |
          needs.version-release.outputs.release_created == 'true' || 
          needs.version-release.outputs.releases_created == 'true' ||
          (github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production')
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: ${{ runner.temp }}/production/

      - name: 📤 上传构建分支产物
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: build-branch-artifacts
          path: ${{ runner.temp }}/build-branch/

      - name: 📤 上传预览包产物
        if: github.event_name != 'workflow_dispatch' || inputs.run_mode != 'production'
        uses: actions/upload-artifact@v4
        with:
          name: preview-build
          path: ${{ runner.temp }}/preview/

      - name: ✅ 标记构建状态
        id: build-status
        run: echo "success=true" >> $GITHUB_OUTPUT

  # NPM 正式发布
  npm-production-publish:
    runs-on: ubuntu-latest
    needs: [version-release, unified-build]
    if: |
      needs.unified-build.outputs.build_success == 'true' && (
        needs.version-release.outputs.release_created == 'true' ||
        needs.version-release.outputs.releases_created == 'true' ||
        (github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production')
      )
    steps:
      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./

      - name: 🚀 发布到 NPM 官方源
        id: publish-to-npm
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          registry: https://registry.npmjs.org/
          access: public
          provenance: true

      - name: 📊 生成发布报告
        run: |
          echo "## 📦 NPM 发布成功" >> $GITHUB_STEP_SUMMARY
          echo "- **包名:** \`${{ steps.publish-to-npm.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **版本:** \`${{ steps.publish-to-npm.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **模式:** ${{ github.event_name == 'workflow_dispatch' && inputs.run_mode == 'production' && '🎯 手动生产发布' || '🤖 自动发布' }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.version-release.outputs.manual_release_notes }}" != "" ]; then
            echo "- **发布说明:** ${{ needs.version-release.outputs.manual_release_notes }}" >> $GITHUB_STEP_SUMMARY
          fi

  # 镜像源同步
  npm-mirror-sync:
    runs-on: ubuntu-latest
    needs: [npm-production-publish]
    steps:
      - name: 🔄 同步到国内镜像源
        run: |
          curl -X PUT "https://registry-direct.npmmirror.com/-/package/karin-plugin-kkk/syncs"

  # 预览包发布（优先执行）
  preview-package-publish:
    runs-on: ubuntu-latest
    needs: [unified-build, version-release]
    if: needs.unified-build.outputs.build_success == 'true' && (github.event_name != 'workflow_dispatch' || inputs.run_mode != 'production')
    outputs:
      pkg_version: ${{ steps.version-gen.outputs.version }}
      pnpm_install_cmd: ${{ steps.publish_pkg.outputs.pnpm_install_cmd }}

    steps:
      - name: 📥 检出源代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 配置 PNPM 环境
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.9

      - name: 🟢 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: preview-build
          path: ./

      - name: 🏷️ 生成版本标识
        id: version-gen
        run: |
          # 1) 获取最新的Git标签版本作为基准
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            # 移除v前缀并提取版本号
            LAST_TAG_VERSION=${LAST_TAG#v}
            if echo "$LAST_TAG_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' >/dev/null; then
              BASE_VERSION="$LAST_TAG_VERSION"
            else
              BASE_VERSION="0.0.0"
            fi
          else
            BASE_VERSION="0.0.0"
          fi

          # 2) 获取release-please输出的版本作为参考
          RELEASE_VERSION="${{ needs.version-release.outputs.core_version }}"
          PKG_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "")

          # 3) 选择最高的版本作为基准（确保不会倒退）
          compare_versions() {
            local v1=$1 v2=$2
            IFS='.' read -r -a ver1 <<< "$v1"
            IFS='.' read -r -a ver2 <<< "$v2"
            for i in 0 1 2; do
              local num1=${ver1[$i]:-0}
              local num2=${ver2[$i]:-0}
              if [ "$num1" -gt "$num2" ] 2>/dev/null; then
                return 1  # v1 > v2
              elif [ "$num1" -lt "$num2" ] 2>/dev/null; then
                return 2  # v1 < v2
              fi
            done
            return 0  # v1 == v2
          }

          # 选择最高版本作为基准
          FINAL_BASE="$BASE_VERSION"
          if [ -n "$RELEASE_VERSION" ] && echo "$RELEASE_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' >/dev/null; then
            compare_versions "$FINAL_BASE" "$RELEASE_VERSION" || true
            result=$?
            if [ $result -eq 2 ]; then
              FINAL_BASE="$RELEASE_VERSION"
            fi
          fi
          if [ -n "$PKG_VERSION" ] && echo "$PKG_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' >/dev/null; then
            compare_versions "$FINAL_BASE" "$PKG_VERSION" || true
            result=$?
            if [ $result -eq 2 ]; then
              FINAL_BASE="$PKG_VERSION"
            fi
          fi

          echo "🏷️ 基准版本选择："
          echo "  - Git标签版本: $BASE_VERSION"
          echo "  - Release版本: $RELEASE_VERSION"
          echo "  - Package版本: $PKG_VERSION"
          echo "  - 最终基准: $FINAL_BASE"

          # 4) 基于提交信息判断版本提升类型
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMITS=$(git log --no-merges --pretty=%s HEAD ^origin/main 2>/dev/null || echo "")
          else
            if [ -n "$LAST_TAG" ]; then
              COMMITS=$(git log --no-merges --pretty=%s "$LAST_TAG"..HEAD 2>/dev/null || echo "")
            else
              COMMITS=$(git log --no-merges --pretty=%s HEAD 2>/dev/null || echo "")
            fi
          fi

          echo "📝 分析提交信息："
          echo "$COMMITS" | head -5

          BUMP="none"
          # BREAKING CHANGE -> major
          if echo "$COMMITS" | grep -E 'BREAKING CHANGE|^.*!:' >/dev/null; then
            BUMP="major"
          # feat -> minor
          elif echo "$COMMITS" | grep -E '^feat(\(.+\))?:' >/dev/null; then
            BUMP="minor"
          # fix, perf, refactor -> patch
          elif echo "$COMMITS" | grep -E '^(fix|perf|refactor)(\(.+\))?:' >/dev/null; then
            BUMP="patch"
          fi

          echo "🔄 版本提升类型: $BUMP"

          # 5) 计算新版本号
          MAJOR=$(echo "$FINAL_BASE" | cut -d. -f1)
          MINOR=$(echo "$FINAL_BASE" | cut -d. -f2)
          PATCH=$(echo "$FINAL_BASE" | cut -d. -f3)
          [ -z "$MAJOR" ] && MAJOR=0
          [ -z "$MINOR" ] && MINOR=0
          [ -z "$PATCH" ] && PATCH=0

          case "$BUMP" in
            major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
            patch) PATCH=$((PATCH + 1)) ;;
            *) 
              # 如果没有匹配的提交类型，至少提升patch版本（避免版本倒退）
              PATCH=$((PATCH + 1))
              ;;
          esac
          BASE_NEXT="${MAJOR}.${MINOR}.${PATCH}"

          echo "📦 计算后的基础版本: $BASE_NEXT"

          COMMIT_COUNT=$(git rev-list --count HEAD 2>/dev/null || echo 0)
          TIMESTAMP=$(date +%s)

          # 6) 根据事件类型拼接预发布后缀
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [[ "${{ github.head_ref }}" == release-please--branches--* ]]; then
              TAG="${{ needs.version-release.outputs.release_tag_name }}"
              if [ -n "$TAG" ]; then
                TAG=${TAG#v}
                BASE_NEXT="$TAG"
              fi
              TIME_SUFFIX=$(TZ='Asia/Shanghai' date +%m%d%H%M)
              NEW_VERSION="${BASE_NEXT}-rc.${TIME_SUFFIX}"
            else
              PR_NUMBER=${{ github.event.number }}
              PR_COMMIT_COUNT=$(git rev-list --count HEAD ^origin/main 2>/dev/null || echo 0)
              NEW_VERSION="${BASE_NEXT}-alpha.${PR_NUMBER}.${PR_COMMIT_COUNT}"
            fi
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TIME_SUFFIX=$(echo "$TIMESTAMP" | tail -c 5)
            NEW_VERSION="${BASE_NEXT}-beta.${COMMIT_COUNT}.${TIME_SUFFIX}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TIME_SUFFIX=$(TZ='Asia/Shanghai' date +%m%d%H%M)
            NEW_VERSION="${BASE_NEXT}-manual.${TIME_SUFFIX}"
          else
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            NEW_VERSION="${BASE_NEXT}-dev.${BRANCH_NAME}.${{ needs.unified-build.outputs.short_commit_hash }}"
          fi

          echo "🎯 最终生成版本: $NEW_VERSION"
          npm version "$NEW_VERSION" --no-git-tag-version
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 🧹 清理开发依赖
        run: pnpm pkg delete devDependencies

      - name: 🚀 发布预览包
        id: publish_pkg
        run: |
          pnpm dlx pkg-pr-new publish --json output.json --comment=update --compact --packageManager=pnpm > pkg-output.txt 2>&1

          ACTUAL_INSTALL_URL=$(grep -oE 'https://pkg\.pr\.new/[^[:space:]`]+' pkg-output.txt | head -n 1 || echo "")

          if [ ! -z "$ACTUAL_INSTALL_URL" ]; then
            PNPM_INSTALL_CMD="pnpm add ${ACTUAL_INSTALL_URL} -w"
          else
            PNPM_INSTALL_CMD="未找到安装命令"
          fi

          echo "pnpm_install_cmd=$PNPM_INSTALL_CMD" >> $GITHUB_OUTPUT

      - name: 💬 发布 PR 评论
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 📦 预览包发布成功

            ### 🏷️ 包信息
            - **版本:** `${{ steps.version-gen.outputs.version }}`
            - **提交:** [`${{ needs.unified-build.outputs.short_commit_hash }}`](https://github.com/${{ github.repository }}/tree/${{ needs.unified-build.outputs.commit_hash }})

            ### 📥 安装命令
            ```bash
            ${{ steps.publish_pkg.outputs.pnpm_install_cmd }}
            ```
          comment-tag: published-packages
          mode: upsert
          reactions: rocket

  # 预览包发布后的即时构建摘要（PR）
  pr-summary:
    runs-on: ubuntu-latest
    needs: [unified-build, preview-package-publish]
    if: github.event_name == 'pull_request' && needs.unified-build.outputs.build_success == 'true' && needs.preview-package-publish.result == 'success'
    steps:
      - name: 📊 生成PR构建摘要
        run: |
          echo "# 🚀 PR 构建完成摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📦 NPM 预览包" >> $GITHUB_STEP_SUMMARY
          echo "- **版本:** \`${{ needs.preview-package-publish.outputs.pkg_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📥 安装命令" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.preview-package-publish.outputs.pnpm_install_cmd }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # 预览包发布后的即时构建摘要（仅针对main分支推送）
  main-push-summary:
    runs-on: ubuntu-latest
    needs: [unified-build, preview-package-publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.unified-build.outputs.build_success == 'true' && needs.preview-package-publish.result == 'success'
    steps:
      - name: 📊 生成main分支推送构建摘要
        run: |
          echo "# 🚀 Main分支构建完成摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # NPM 预览包信息
          echo "## 📦 NPM 预览包" >> $GITHUB_STEP_SUMMARY
          echo "- **版本:** \`${{ needs.preview-package-publish.outputs.pkg_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 安装命令" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.preview-package-publish.outputs.pnpm_install_cmd }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 构建信息
          echo "## ℹ️ 构建信息" >> $GITHUB_STEP_SUMMARY
          echo "- **提交:** [\`${{ needs.unified-build.outputs.short_commit_hash }}\`](https://github.com/${{ github.repository }}/commit/${{ needs.unified-build.outputs.commit_hash }})" >> $GITHUB_STEP_SUMMARY
          echo "- **分支:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **触发:** 推送到main分支" >> $GITHUB_STEP_SUMMARY

  build-summary:
    runs-on: ubuntu-latest
    needs: [unified-build, preview-package-publish]
    if: always() && needs.unified-build.outputs.build_success == 'true'
    steps:
      - name: 📊 生成完整构建摘要
        run: |
          echo "# 🚀 完整构建摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # NPM 包信息
          if [ "${{ needs.preview-package-publish.result }}" = "success" ]; then
            echo "## 📦 NPM 预览包" >> $GITHUB_STEP_SUMMARY
            echo "- **版本:** \`${{ needs.preview-package-publish.outputs.pkg_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📥 安装命令" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "${{ needs.preview-package-publish.outputs.pnpm_install_cmd }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
